/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stuba.fiit.kvasnicka.topologyvisual.gui.simulation.simulationdata;

import info.monitorenter.gui.chart.Chart2D;
import info.monitorenter.gui.chart.ITrace2D;
import info.monitorenter.gui.chart.traces.Trace2DSimple;
import info.monitorenter.gui.chart.traces.painters.TracePainterFill;
import java.awt.Color;
import java.awt.GridLayout;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.jdesktop.swingx.JXTaskPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import sk.stuba.fiit.kvasnicka.qsimsimulation.rule.SimulationRuleBean;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//sk.stuba.fiit.kvasnicka.topologyvisual.simulationdata//SimulationData//EN",
autostore = false)
@TopComponent.Description(preferredID = "SimulationDataTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "sk.stuba.fiit.kvasnicka.topologyvisual.simulationdata.SimulationDataTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_SimulationDataAction",
preferredID = "SimulationDataTopComponent")
@Messages({
    "CTL_SimulationDataAction=SimulationData",
    "CTL_SimulationDataTopComponent=SimulationData Window",
    "HINT_SimulationDataTopComponent=This is a SimulationData window"
})
public final class SimulationDataTopComponent extends TopComponent {

    public SimulationDataTopComponent() {
        initComponents();
        setName(Bundle.CTL_SimulationDataTopComponent());
        setToolTipText(Bundle.HINT_SimulationDataTopComponent());

        chart.setToolTipType(Chart2D.ToolTipType.VALUE_SNAP_TO_TRACEPOINTS);
    }

    /**
     * "trace" is object that stores point on the chart
     *
     * @param traceColor color to be rendered
     * @return
     */
    private ITrace2D createTrace(Color traceColor) {

        ITrace2D trace = new Trace2DSimple();
        trace.setColor(traceColor);
        trace.setTracePainter(new TracePainterFill(chart));
        chart.addTrace(trace);

        return trace;
    }

    /**
     * sets simulation rules that should be showed
     *
     * @param rules
     */
    public void setSimulationRule(List<SimulationRuleBean> rules) {
        setName(createTitle(rules));
        for (SimulationRuleBean rule : rules) {
            addTaskPane();//todo dokoncit - tu byt ako argument statisticke data
        }
    }

    private void addTaskPane() {
        JXTaskPane p = new JXTaskPane();
        p.setTitle("baf");
        JPanel pp = new JPanel(new GridLayout(2, 2));

        pp.add(new JLabel("adad"));
        pp.add(new JLabel("dddd"));
        pp.add(new JLabel("111adad"));
        pp.add(new JLabel("2222adad"));
        p.add(pp);

        jXTaskPaneContainer1.add(p);
        jXTaskPaneContainer1.revalidate();
    }

    private String createTitle(List<SimulationRuleBean> rules) {

        StringBuilder sb = new StringBuilder();
        int i = 0;
        for (SimulationRuleBean rule : rules) {
            if (i == rules.size() - 1) {
                sb.append(rule.getName());
                break;
            }
            i++;
            sb.append(rule.getName()).append(", ");
        }
        return sb.toString();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chart = new info.monitorenter.gui.chart.Chart2D();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTaskPaneContainer1 = new org.jdesktop.swingx.JXTaskPaneContainer();

        chart.setRequestedRepaint(false);
        chart.setUseAntialiasing(true);

        javax.swing.GroupLayout chartLayout = new javax.swing.GroupLayout(chart);
        chart.setLayout(chartLayout);
        chartLayout.setHorizontalGroup(
            chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 821, Short.MAX_VALUE)
        );
        chartLayout.setVerticalGroup(
            chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 379, Short.MAX_VALUE)
        );

        jXTaskPaneContainer1.setOpaque(false);
        jScrollPane1.setViewportView(jXTaskPaneContainer1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(chart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private info.monitorenter.gui.chart.Chart2D chart;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTaskPaneContainer jXTaskPaneContainer1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }
}
