/*
 * This file is part of qSim.
 *
 * qSim is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * qSim is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with qSim.  If not, see <http://www.gnu.org/licenses/>.
 */
package sk.stuba.fiit.kvasnicka.topologyvisual.filetype.gui;

import java.io.Serializable;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JToolBar;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.PlainDocument;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import sk.stuba.fiit.kvasnicka.topologyvisual.filetype.TopologyFileTypeDataObject;
import sk.stuba.fiit.kvasnicka.topologyvisual.gui.NetbeansWindowHelper;

/**
 * this MultiViewElement is very (!) important to make the whole Topcomponent
 * serialisable (because of window persistence). it is also very important to
 * make this MultiViewElement default MultiViewElement that is shown
 *
 * @author Igor Kvasnicka
 */
public class TopologyInformation extends javax.swing.JPanel implements MultiViewElement {

    private JToolBar toolBar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private TopologyFileTypeDataObject obj;

    public TopologyInformation(TopologyFileTypeDataObject obj) {
        this.obj = obj;
        initComponents();
        jTextField1.setText(obj.getLoadSettings().getName());
        jTextArea1.setText(obj.getLoadSettings().getDescription());
        if (obj.getLoadSettings().getG() != null) {//topology was loaded
            lblNodeCount.setText(NbBundle.getMessage(TopologyInformation.class, "number_of_nodes") + ": " + obj.getLoadSettings().getVertexFactory().getAllVertices().size());
            lblRouters.setText(NbBundle.getMessage(TopologyInformation.class, "number_of_routers") + ": " + obj.getLoadSettings().getVertexFactory().getVertexRouterList().size());
            lblSwitches.setText(NbBundle.getMessage(TopologyInformation.class, "number_of_switches") + ": " + obj.getLoadSettings().getVertexFactory().getVertexSwitchList().size());
            lblComputers.setText(NbBundle.getMessage(TopologyInformation.class, "number_of_computers") + ": " + obj.getLoadSettings().getVertexFactory().getVertexComputerList().size());
            lblEdges.setText(NbBundle.getMessage(TopologyInformation.class, "number_of_edges") + ": " + obj.getLoadSettings().getLayout().getGraph().getEdgeCount());
            lblSimulRules.setText(NbBundle.getMessage(TopologyInformation.class, "number_of_simulRules") + ": " + obj.getLoadSettings().getSimulRulesData().size());
        }
        initDocumentListeners();
    }

    /**
     * inits document listeners to listen for changes in name/description
     * textfield/area the problem is that when keyTyped() method is used, I
     * encountered Swing bug #4140413
     */
    private void initDocumentListeners() {
        DocumentListenerImpl documentListenerImpl = new DocumentListenerImpl();
        jTextArea1.getDocument().addDocumentListener(documentListenerImpl);
        jTextField1.getDocument().addDocumentListener(documentListenerImpl);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        lblNodeCount = new javax.swing.JLabel();
        lblRouters = new javax.swing.JLabel();
        lblSwitches = new javax.swing.JLabel();
        lblComputers = new javax.swing.JLabel();
        lblEdges = new javax.swing.JLabel();
        lblSimulRules = new javax.swing.JLabel();

        jLabel2.setText(org.openide.util.NbBundle.getMessage(TopologyInformation.class, "TopologyInformation.jLabel2.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(TopologyInformation.class, "TopologyInformation.jTextField1.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(TopologyInformation.class, "TopologyInformation.jLabel3.text")); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(TopologyInformation.class, "TopologyInformation.jPanel1.border.title"))); // NOI18N

        lblNodeCount.setText(org.openide.util.NbBundle.getMessage(TopologyInformation.class, "TopologyInformation.lblNodeCount.text")); // NOI18N

        lblRouters.setText(org.openide.util.NbBundle.getMessage(TopologyInformation.class, "TopologyInformation.lblRouters.text")); // NOI18N

        lblSwitches.setText(org.openide.util.NbBundle.getMessage(TopologyInformation.class, "TopologyInformation.lblSwitches.text_1")); // NOI18N

        lblComputers.setText(org.openide.util.NbBundle.getMessage(TopologyInformation.class, "TopologyInformation.lblComputers.text_1")); // NOI18N

        lblEdges.setText(org.openide.util.NbBundle.getMessage(TopologyInformation.class, "TopologyInformation.lblEdges.text_1")); // NOI18N

        lblSimulRules.setText(org.openide.util.NbBundle.getMessage(TopologyInformation.class, "TopologyInformation.lblSimulRules.text_1")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNodeCount)
                    .addComponent(lblRouters)
                    .addComponent(lblSwitches)
                    .addComponent(lblComputers)
                    .addComponent(lblEdges)
                    .addComponent(lblSimulRules))
                .addContainerGap(306, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblNodeCount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(lblRouters)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSwitches)
                .addGap(18, 18, 18)
                .addComponent(lblComputers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEdges)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSimulRules)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(285, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblComputers;
    private javax.swing.JLabel lblEdges;
    private javax.swing.JLabel lblNodeCount;
    private javax.swing.JLabel lblRouters;
    private javax.swing.JLabel lblSimulRules;
    private javax.swing.JLabel lblSwitches;
    // End of variables declaration//GEN-END:variables

    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolBar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
        checkDocumentListeners((PlainDocument) jTextArea1.getDocument());
        checkDocumentListeners((PlainDocument) jTextField1.getDocument());
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    /**
     * There is a problem when this TopComponent is opened and user closes qSim.
     * That means that all opened TopComponents are persisted so that when qSim
     * is later re-started, these TopComponent are opened again. However I've
     * noticed that my DocumentListeners associated with JTextArea and
     * JTextField are not persisted. So in this method I check if
     * DocumentListeners are registered (if not that means qSim re-opened this
     * TopComponent). I would say it is Netbeans RCP's bug, but how can it be,
     * right? It is a fundamental feature that is used all across Netbeans IDE.
     *
     * @param plainDocument
     */
    private void checkDocumentListeners(PlainDocument plainDocument) {
        DocumentListenerImpl[] listeners = plainDocument.getListeners(DocumentListenerImpl.class);
        if (listeners.length == 0) {//no document listeners of my type are yet registered
            initDocumentListeners();
        }
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
        if (obj == null) {
            return;
        }
        if (obj.isDirty()) {
            callback.updateTitle(obj.getPrimaryFile().getNameExt() + "*");
        } else {
            callback.updateTitle(obj.getPrimaryFile().getNameExt());
        }
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    private class DocumentListenerImpl implements DocumentListener {

        public DocumentListenerImpl() {
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            obj.modifiedInformation(callback.getTopComponent(), jTextField1.getText(), jTextArea1.getText());
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            obj.modifiedInformation(callback.getTopComponent(), jTextField1.getText(), jTextArea1.getText());
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            obj.modifiedInformation(callback.getTopComponent(), jTextField1.getText(), jTextArea1.getText());
        }
    }
}
