/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stuba.fiit.kvasnicka.topologyvisual.gui.dialogs.topology.qos.supporting;

import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import lombok.Getter;
import org.netbeans.api.javahelp.Help;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.windows.WindowManager;
import sk.stuba.fiit.kvasnicka.qsimsimulation.qos.classification.utils.ClassificationException;
import sk.stuba.fiit.kvasnicka.qsimsimulation.qos.classification.utils.ClassificationUtil;

/**
 *
 * @author Igor Kvasnicka
 */
public class DscpQueryDialog extends javax.swing.JDialog {

    private boolean dialogConfirmed = false;

    /**
     * Creates new form DscpQueryDialog
     */
    public DscpQueryDialog(JDialog parent, String defaultQuery, boolean flow) {
        super(parent, true);
        initComponents();
        jXTextArea1.setPrompt("ACL query");
        listOperands.addListSelectionListener(new QueryListSelectionHandler(listOperands));
        listOperators.addListSelectionListener(new QueryListSelectionHandler(listOperators));
        initOperatorsList();
        initOperandsList(flow);
        lblError.setVisible(false);
        jXTextArea1.setText(defaultQuery);
        setLocationRelativeTo(parent);
    }

    private void initOperatorsList() {
        DefaultListModel model = new DefaultListModel();
        listOperators.setModel(model);

        model.addElement(new ListItem("AND", 0));
        model.addElement(new ListItem("OR", 0));
        model.addElement(new ListItem("=", 0));
        model.addElement(new ListItem("!=", 0));
        model.addElement(new ListItem("<=", 0));
        model.addElement(new ListItem("=>", 0));
        model.addElement(new ListItem("OR", 0));

    }

    private void initOperandsList(boolean flow) {
        DefaultListModel model = new DefaultListModel();
        listOperands.setModel(model);
        model.clear();
        if (!flow) {
            model.addElement(new ListItem("size", 0));
        }
        model.addElement(new ListItem("source", 2, "source('')"));
        model.addElement(new ListItem("sourceIn", 3, "sourceIn([''])"));
        model.addElement(new ListItem("notSource", 2, "notSource('')"));
        model.addElement(new ListItem("notSourceIn", 3, "notSourceIn([''])"));
        model.addElement(new ListItem("destination", 2, "destination('')"));
        model.addElement(new ListItem("destinationIn", 3, "destinationIn([''])"));
        model.addElement(new ListItem("notDestination", 2, "notDestination('')"));
        model.addElement(new ListItem("notDestinationIn", 3, "notDestinationIn([''])"));
        model.addElement(new ListItem("srcPort", 0));
        model.addElement(new ListItem("destPort", 0));
        if (!flow) {
            model.addElement(new ListItem("protocol", 0));
        }
        if (!flow) {
            model.addElement(new ListItem("ipPrecedence", 0));
        }
    }

    private void addToText(ListItem selected, int moveCaretLeft) {
        jXTextArea1.setText(jXTextArea1.getText() + " " + selected.getReplacement());
        jXTextArea1.setCaretPosition(jXTextArea1.getText().length() - moveCaretLeft);
        jXTextArea1.requestFocus();
    }

    /**
     * returns DSCP query - this query is already validated
     *
     * @return null if no query was defined
     */
    public String getDscpQuery() {
        if (dialogConfirmed) {
            return jXTextArea1.getText();
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listOperators = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        listOperands = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jXTextArea1 = new org.jdesktop.swingx.JXTextArea();
        jLabel2 = new javax.swing.JLabel();
        lblError = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(DscpQueryDialog.class, "DscpQueryDialog.title")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DscpQueryDialog.class, "DscpQueryDialog.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(DscpQueryDialog.class, "DscpQueryDialog.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(DscpQueryDialog.class, "DscpQueryDialog.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DscpQueryDialog.class, "DscpQueryDialog.jScrollPane1.border.title"))); // NOI18N

        listOperators.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listOperators);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DscpQueryDialog.class, "DscpQueryDialog.jScrollPane2.border.title"))); // NOI18N

        jScrollPane2.setViewportView(listOperands);

        jXTextArea1.setColumns(20);
        jXTextArea1.setRows(5);
        jScrollPane3.setViewportView(jXTextArea1);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DscpQueryDialog.class, "DscpQueryDialog.jLabel2.text")); // NOI18N

        lblError.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(lblError, org.openide.util.NbBundle.getMessage(DscpQueryDialog.class, "DscpQueryDialog.lblError.text")); // NOI18N

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sk/stuba/fiit/kvasnicka/topologyvisual/resources/files/help.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(DscpQueryDialog.class, "DscpQueryDialog.jButton3.text")); // NOI18N
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setFocusPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane3))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(43, 43, 43)
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblError))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(lblError)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(36, 36, 36))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            ClassificationUtil.validateClassificationRule(jXTextArea1.getText());//todo dokocit a nezabudni na navratovu hodnotu tohto dialogu + cancel button
            dialogConfirmed = true;
            this.setVisible(false);
        } catch (ClassificationException ex) {
            lblError.setText("Unparsable DSCP query.");
            lblError.setVisible(true);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jXTextArea1.setText("");
        dialogConfirmed = false;
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Help help = Lookup.getDefault().lookup(Help.class);
        help.showHelp(new HelpCtx("sk.stuba.fiit.kvasnicka.topologyvisual.acl"));
    }//GEN-LAST:event_jButton3ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXTextArea jXTextArea1;
    private javax.swing.JLabel lblError;
    private javax.swing.JList listOperands;
    private javax.swing.JList listOperators;
    // End of variables declaration//GEN-END:variables

    private class QueryListSelectionHandler implements ListSelectionListener {

        private JList list;

        public QueryListSelectionHandler(JList list) {
            this.list = list;
        }

        @Override
        public void valueChanged(ListSelectionEvent e) {

            if (e.getValueIsAdjusting()) {
                return;
            }
            if (list.getSelectedIndices().length == 0) {
                return;
            }

            int leftCaretShift = ((ListItem) list.getSelectedValue()).getValue();

            addToText((ListItem) list.getSelectedValue(), leftCaretShift);
        }
    }

    @Getter
    private class ListItem {

        private String label;
        private int value;
        private String replacement;

        private ListItem(String label, int value) {
            this.label = label;
            this.value = value;
            this.replacement = label;
        }

        public ListItem(String label, int value, String replacement) {
            this.label = label;
            this.value = value;
            this.replacement = replacement;
        }

        @Override
        public String toString() {
            return label;
        }
    }
}
